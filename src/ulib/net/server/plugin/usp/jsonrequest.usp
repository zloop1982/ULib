<!--#declaration
#include <ulib/json/value.h>

/**
 * {
 * "user": "doctoravatar@penzance.com",
 * "forecast": 7,
 * "t": "vlIj",
 * "zip": 94089
 * }
 */

class Request {
public:
   // Check for memory error
   U_MEMORY_TEST

   // Allocator e Deallocator
   U_MEMORY_ALLOCATOR
   U_MEMORY_DEALLOCATOR

   UString user, t;
   uint32_t forecast, zip;

   Request()
      {
      U_TRACE_REGISTER_OBJECT(5, Request, "")
      }

   Request(const Request& r) : user(r.user), t(r.t)
      {
      U_TRACE_REGISTER_OBJECT(5, Request, "%p", &r)

      U_MEMORY_TEST_COPY(r)

      forecast = r.forecast;
           zip = r.zip;
      }

   ~Request()
      {
      U_TRACE_UNREGISTER_OBJECT(5, Request)
      }

#ifdef DEBUG
   const char* dump(bool breset) const
      {
      *UObjectIO::os << "zip           " << zip          << '\n'
                     << "forecast      " << forecast     << '\n'
                     << "t    (UString " << (void*)&t    << ")\n"
                     << "user (UString " << (void*)&user << ')';

      if (breset)
         {
         UObjectIO::output();

         return UObjectIO::buffer_output;
         }

      return 0;
      }
#endif

private:
   Request& operator=(const Request&) { return *this; }
};

// JSON TEMPLATE SPECIALIZATIONS

template <> class U_EXPORT UJsonTypeHandler<Request> : public UJsonTypeHandler_Base {
public:
   explicit UJsonTypeHandler(Request& val) : UJsonTypeHandler_Base(&val) {}

   void toJSON(UValue& json)
      {
      U_TRACE(0, "UJsonTypeHandler<Request>::toJSON(%p)", &json)

      json.toJSON(U_JSON_TYPE_HANDLER(Request, user,     UString));
      json.toJSON(U_JSON_TYPE_HANDLER(Request, t,        UString));
      json.toJSON(U_JSON_TYPE_HANDLER(Request, forecast, uint32_t));
      json.toJSON(U_JSON_TYPE_HANDLER(Request, zip,      uint32_t));
      }

   void fromJSON(UValue& json)
      {
      U_TRACE(0, "UJsonTypeHandler<Request>::fromJSON(%p)", &json)

      json.fromJSON(U_JSON_TYPE_HANDLER(Request, user,      UString));
      json.fromJSON(U_JSON_TYPE_HANDLER(Request, t,         UString));
      json.fromJSON(U_JSON_TYPE_HANDLER(Request, forecast,  uint32_t));
      json.fromJSON(U_JSON_TYPE_HANDLER(Request, zip,       uint32_t));
      }
};
-->
<!--#header
Content-Type: application/jsonrequest
-->
<!--#code
U_INTERNAL_DUMP("U_HTTP_CTYPE = %.*S", U_HTTP_CTYPE_TO_TRACE)

if (U_HTTP_CTYPE_STREQ("application/jsonrequest"))
   {
   Request request;

   if (USP_JSON_REQUEST_PARSE(request)) USP_JSON_OBJ_stringify(Request, request)
   else                                 USP_PUTS_CONSTANT("{}");
   }
-->
